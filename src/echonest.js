// Generated by CoffeeScript 1.6.1
(function() {
  var AudioPlayer, EchoNest, Event, EventManager, Graphics, init,
    _this = this;

  EventManager = new EventEmitter();

  Event = {
    TrackAnalyzed: "Track Complete"
  };

  EchoNest = (function() {

    EchoNest.prototype.RemixAPISettings = {
      TRACK_ID: 'TRPZSJT13ECA86C9F1',
      API: 'SLU8WR6N1N06GTQNB',
      URL: 'http://s3.amazonaws.com/easybakerstreetoven-en-us/remix_audio/Nelly%20-%20Hot%20in%20Herre%20(The%20real%20hot%20in%20here).mp3'
    };

    EchoNest.prototype.remixer = null;

    EchoNest.prototype.context = null;

    EchoNest.prototype.player = null;

    EchoNest.prototype.status = document.getElementById('status-text');

    function EchoNest() {
      this.status = document.getElementById('status-text');
      this.setupElements();
      this.createContext();
      this.createRemixer();
      null;
    }

    EchoNest.prototype.setupElements = function() {};

    EchoNest.prototype.createContext = function() {
      if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
        return this.context = new webkitAudioContext();
      } else {
        return this.context = new AudioContext();
      }
    };

    EchoNest.prototype.createRemixer = function() {
      this.remixer = createJRemixer(this.context, $, this.RemixAPISettings.API);
      return this.remixTrack();
    };

    EchoNest.prototype.remixTrack = function() {
      var _this = this;
      return this.remixer.remixTrackById(this.RemixAPISettings.TRACK_ID, this.RemixAPISettings.URL, function(t, percent) {
        var part, track;
        track = t;
        console.log(percent);
        if (track.status === 'ok') {
          part = 'bars';
          _this.remixed = track.analysis[part];
          return EventManager.emitEvent(Event.TrackAnalyzed, [_this.remixed]);
        }
      });
    };

    return EchoNest;

  })();

  AudioPlayer = (function() {

    AudioPlayer.prototype.context = null;

    function AudioPlayer() {
      this.checkWebAudioContext();
      this.createContext();
    }

    AudioPlayer.prototype.checkWebAudioContext = function() {
      if (window.webkitAudioContext === void 0) {
        return new Error("Sorry, this app needs advanced web audio. Your browser doesn't", +" support it. Try the latest version of Chrome");
      }
    };

    AudioPlayer.prototype.createContext = function() {
      if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
        return this.context = new webkitAudioContext();
      } else {
        return this.context = new AudioContext();
      }
    };

    AudioPlayer.prototype.playSound = function(sound) {
      this.source = this.context.createBufferSource();
      this.source.buffer = sound;
      this.source.connect(this.context.destination);
      return this.source.noteOn(0);
    };

    return AudioPlayer;

  })();

  Graphics = (function() {

    Graphics.prototype.data = null;

    Graphics.prototype.width = window.innerWidth;

    Graphics.prototype.height = window.innerHeight;

    Graphics.prototype.svg = null;

    Graphics.prototype.minSize = 5;

    Graphics.prototype.maxSize = 10;

    Graphics.prototype.scaleFactor = 100;

    Graphics.prototype.audio = null;

    Graphics.prototype.next = null;

    function Graphics(data, audio) {
      var _this = this;
      this.data = data;
      this.audio = audio;
      this.audioCallback = function(e) {
        return Graphics.prototype.audioCallback.apply(_this, arguments);
      };
      this.createSVG();
      this.createAudio();
    }

    Graphics.prototype.audioCallback = function(e) {
      console.log('playee');
      this.next = this.currentAudioSample.next;
      return this.currentAudioSample = this.next;
    };

    Graphics.prototype.createAudio = function() {
      var _this = this;
      return this.audio.addAfterPlayCallback(function(e) {
        return _this.audioCallback(e);
      });
    };

    Graphics.prototype.createSVG = function() {
      var getSize, getX, onmouseover, scale, yOffset, yWave,
        _this = this;
      this.svg = d3.select("body").append("svg").attr("width", this.width).attr("height", this.height).append('g');
      getSize = function(d) {
        var size;
        size = Math.min(_this.maxSize, Math.max(_this.minSize, d.confidence * _this.scaleFactor));
        return size;
      };
      scale = this.width / parseInt(this.data[0].track.audio_summary.duration);
      getX = function(d) {
        console.log(d.start);
        return d.start * scale;
      };
      onmouseover = function(data, el, node) {
        var circle;
        circle = d3.select(d3.event.target);
        circle.attr('r', 0);
        _this.currentAudioSample = data;
        _this.audio.stop();
        return _this.audio.play(0, data);
      };
      yWave = 100;
      yOffset = 400;
      return this.svg.selectAll('g').data(this.data).enter().append('circle').attr('cx', getX).attr('cy', function(d, i) {
        return (Math.sin(i) * yWave) + yOffset;
      }).attr('fill', 'black').attr('r', getSize).on('mouseover', onmouseover);
    };

    return Graphics;

  })();

  init = function() {
    var echo;
    echo = new EchoNest();
    return EventManager.addListener(Event.TrackAnalyzed, function(trackData) {
      var gfx;
      echo.status.innerHTML = "";
      return gfx = new Graphics(trackData, echo.remixer.getPlayer());
    });
  };

  $(document).ready(function() {
    return init();
  });

}).call(this);
